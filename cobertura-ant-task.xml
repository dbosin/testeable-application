<?xml version="1.0" encoding="UTF-8"?>
<project name="unittest-with-coverage-project" default="all" basedir=".">
 
     <!-- properties -->
     <property name="libs.dir" value="libs" />
     <property name="src.dir" value="src" />
     <property name="test.dir" value="test" />
     <property name="target.dir" value="target" />
     <property name="classes.dir" value="${target.dir}/classes" />
     <!-- <property name="instrumentedclasses.dir" value="${target.dir}/instrumentedclasses" />-->
     <property name="instrumentedclasses.dir" value="${classes.dir}" />
     <!-- <property name="testclasses.dir" value="${target.dir}/testclasses" /> -->
     <property name="testclasses.dir" value="${target.dir}/test-classes" />
     <property name="config.dir" value="config" />
     <property name="reports.dir" value="${target.dir}/reports" />
     <property name="junit.reports.dir" value="${reports.dir}/junit" />
     <property name="cobertura.reports.dir" value="${reports.dir}/cobertura" />
     <!--<property name="cobertura.datafile" value="${target.dir}/cobertura.ser" />-->
     <property name="cobertura.datafile" value="${basedir}/cobertura.ser" />
     <property name="project.name" value="${ant.project.name}" />
 
     <!-- paths -->
     <path id="src.compile.classpath" description="classpath for compiling sources">
          <!--<pathelement location="/Users/dbosin/Documents/code/testeable-application/libs/log4j-1.2.17.jar" />-->
          <pathelement location="${libs.dir}/log4j-1.2.17.jar" />
     </path>
     <path id="test.compile.classpath" description="classpath for compiling test-sources">
          <pathelement location="${classes.dir}" />
          <pathelement location="${libs.dir}/junit-4.11.jar" />
     </path>
     <path id="test.runtime.classpath" description="classpath for running junit-tests">
          <pathelement location="${testclasses.dir}" />
          <!-- for junit-run with cobertura we use the instrumented classes -->
          <!--pathelement location="${classes.dir}" /-->
          <pathelement location="${instrumentedclasses.dir}" />
          <pathelement location="${config.dir}" />
          <pathelement location="${libs.dir}/junit-4.11.jar" />
          <pathelement location="${libs.dir}/hamcrest-core-1.3.jar" />
          <!--<pathelement location="/Users/dbosin/Documents/code/testeable-application/libs/log4j-1.2.17.jar" />-->
          <pathelement location="${libs.dir}/log4j-1.2.17.jar" />
     </path>
     <path id="cobertura.classpath" description="classpath for instrumenting classes">
          <pathelement location="${libs.dir}/cobertura-2.0.3.jar" />
          <fileset dir="${libs.dir}">
               <!--<include name="cobertura-dependencies/*.jar" />-->
               <include name="*.jar" />
          </fileset>
     </path>

     <!-- taskdefs -->
     <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
 
     <!-- targets -->
     <target name="all">
          <echo message="clean: deleting the target-directory" />
          <ant target="clean" />
           
          <echo message="prepare: create the necessary directories" />
          <ant target="prepare" />
           
          <echo message="compile.sources: compile all stuff in src-directory" />
          <ant target="compile.sources" />
           
          <echo message="instrument.classes: instrument all compiled classes with coverage-markers" />
          <ant target="instrument.classes" />
           
          <echo message="compile.tests: compile all stuff in test-directory" />
          <ant target="compile.tests" />
           
          <echo message="test: execute the junit-test and create junit- and cobertura-reports" />
          <ant target="test" />
                
          <echo message="package: put all stuff from classes into jar" />
          <ant target="package" />
     </target>
 
     <target name="clean" description="deleting the target-directory">
          <delete includeEmptyDirs="true" failonerror="false">
               <fileset dir="${target.dir}" />
          </delete>
     </target>
 
     <target name="prepare" description="creating the needed directories within target-directory">
          <mkdir dir="${target.dir}" />
          <mkdir dir="${classes.dir}" />
          <mkdir dir="${testclasses.dir}" />
          <mkdir dir="${reports.dir}" />
          <mkdir dir="${junit.reports.dir}" />
          <mkdir dir="${cobertura.reports.dir}" />
     </target>
 
     <target name="compile.sources">
          <javac classpathref="src.compile.classpath" srcdir="${src.dir}" destdir="${classes.dir}" debug="on" source="1.6" fork="true" includeantruntime="no" />
     </target>
 
     <target name="instrument.classes">
          <cobertura-instrument todir="${instrumentedclasses.dir}" datafile="${cobertura.datafile}">
               <includeclasses regex=".*" />
               <instrumentationClasspath>
                    <pathelement location="${classes.dir}" />
               </instrumentationClasspath>
          </cobertura-instrument>
     </target>
 
     <target name="compile.tests">
          <javac classpathref="test.compile.classpath" srcdir="${test.dir}" destdir="${testclasses.dir}" debug="on" source="1.6" fork="true" includeantruntime="no" />
     </target>
 
     <target name="test" description="run the unit-test. attention: haltonfailure=no, because we want to bring the whole build to its end, even if there are testfailures for now">
          <junit printsummary="yes" haltonfailure="no" showoutput="true">
               <!-- junit-specific -->
               <formatter type="xml" />
               <classpath refid="test.runtime.classpath" />
               <batchtest fork="yes" todir="${junit.reports.dir}">
                    <fileset dir="${test.dir}">
                         <include name="**/*Test.java" />
                    </fileset>
               </batchtest>
 
               <!-- cobertura-specific -->
               <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.datafile}" />
               <classpath refid="cobertura.classpath" />
          </junit>
 
          <cobertura-report format="html" destdir="${cobertura.reports.dir}" datafile="${cobertura.datafile}" srcdir="${src.dir}" />
     </target>
 

     <target name="generate.report" description="generate report">
          <!--<copy todir="${src.dir}"> 
               <fileset dir="${basedir}/grails-app/controllers/"/>
               <fileset dir="${basedir}/grails-app/domain/"/>
               <fileset dir="${basedir}/grails-app/services/"/>
               <fileset dir="${basedir}/grails-app/taglib/"/>
               <fileset dir="${basedir}/grails-app/utils/"/>
          </copy>
          <cobertura-report format="html" destdir="${cobertura.reports.dir}" datafile="${cobertura.datafile}" srcdir="${src.dir}" />
          -->
          <cobertura-report format="html" destdir="${cobertura.reports.dir}" datafile="${cobertura.datafile}" >
              <fileset dir="${basedir}/grails-app/controllers/">
                  <!--<include name="*" />-->
                  <!--<exclude name="**/*Stub.java" />-->
              </fileset>
              <fileset dir="${basedir}/grails-app/domain/"></fileset>
              <fileset dir="${basedir}/grails-app/services/"></fileset>
              <fileset dir="${basedir}/grails-app/taglib/"></fileset>
              <fileset dir="${basedir}/grails-app/utils/"></fileset>
          </cobertura-report>

     </target>


     <target name="package">
          <jar destfile="${target.dir}/${project.name}.jar" basedir="${classes.dir}"/>
     </target>
 
</project>